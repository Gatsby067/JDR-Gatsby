import streamlit as st
from openai import OpenAI
import json
from dotenv import load_dotenv
import os

regles = """Tu es un ma√Ætre du jeu de r√¥le m√©di√©val-fantastique, dur et exp√©riment√©. L'univers est sombre, cruel, inspir√© du Moyen √Çge, avec un ton narratif s√©rieux, synth√©tique et immersif.

Les dialogues utilisent un vocabulaire d‚Äô√©poque. Tu ne poses pas de questions, tu laisses le joueur libre. Tu ne parles jamais √† sa place.

Tu analyses les choix du joueur : bonnes d√©cisions r√©compens√©es, erreurs punies. √âchecs fr√©quents, parfois fatals. Les cons√©quences sont durables.

La trahison, la violence, les PNJ impr√©visibles et les √©v√©nements impr√©vus sont fr√©quents, mais coh√©rents.

Le joueur d√©bute avec une √©p√©e rouill√©e et 50 pi√®ces. Il a un inventaire limit√© (surpoids interdit). Les prix sont r√©alistes : cheval 500, repas 2, nuit 5, bi√®re 1...

Tu dois parfois proposer des dilemmes ou √©nigmes mais pas en permanence.

La magie existe, rare et myst√©rieuse, jamais omnipr√©sente.

Les jours passent selon les actions. La faim et la fatigue existent.

L‚Äôunivers √©volue : les informations pass√©es peuvent r√©soudre des situations futures.

Ne rends pas le jeu r√©p√©titif ni trop g√©n√©reux.

Situation initiale :
Vous √™tes un jeune chevalier √† la recherche de gloire et de fortune. Vous arrivez dans la seigneurie d‚Äôun Monseigneur, arm√© de votre √©p√©e rouill√©e et de 50 pi√®ces. On y trouve un ch√¢teau, des plaines agricoles, des habitations, un march√©, une taverne et une for√™t.
"""

load_dotenv()  # charge les variables du fichier .env

api_key = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=api_key)

st.title("Baradduur")

# --- Charger une sauvegarde JSON si elle existe ---
uploaded_file = st.file_uploader("üìÇ Charger une sauvegarde", type="json")
if uploaded_file:
    sauvegarde = json.load(uploaded_file)
    st.session_state.messages = sauvegarde
    st.success("‚úÖ Sauvegarde charg√©e ! Vous pouvez reprendre la partie.")

if "messages" not in st.session_state:
    st.session_state.messages = [{
        "role": "system",
        "content": regles
    }]

# Afficher les anciens messages (sauf le system)
for msg in st.session_state.messages[1:]:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# Saisie utilisateur
user_input = st.chat_input("Entrez votre action...")

if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=st.session_state.messages
    )

    assistant_reply = response.choices[0].message.content
    st.session_state.messages.append({"role": "assistant", "content": assistant_reply})

    # Afficher la r√©ponse
    with st.chat_message("assistant"):
        st.markdown(assistant_reply)

if len(st.session_state.messages) > 20:
    r√©sum√© = client.chat.completions.create(
        model="gpt-4o",
        messages=st.session_state.messages[:-10] + [{"role": "user", "content": "R√©sume les √©v√©nements en actualisant ces √©l√©ments au r√©sum√© pr√©cedent : les pi√®ces d'or, les objets, les actions √©ffectu√©es, les personnages, leurs caract√®res et les actions effectu√©es avec, les lieux visit√©s, les d√©tails important pour la suite"}]
    ).choices[0].message.content

    st.session_state.messages = [
        {"role": "system", "content": regles},
        {"role": "assistant", "content": f"R√©sum√© de la situation : {r√©sum√©}"}
    ] + st.session_state.messages[-10:]


# --- BOUTON POUR T√âL√âCHARGER LA SAUVEGARDE EN JSON ---
json_data = json.dumps(st.session_state.messages, indent=2, ensure_ascii=False)
st.download_button(
    label="üì• T√©l√©charger la sauvegarde",
    data=json_data,
    file_name="sauvegarde_jdr.json",
    mime="application/json"
)

